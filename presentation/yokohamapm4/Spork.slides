----
presentation_topic: Angelos 
presentation_title: Angelosで学ぶ優しいWAFの作り方
presentation_place: dann@Yokohama.pm#4 
presentation_date: 17 April, 2009 
----
----
= About me
* Dann
* Creator of Angelos, cpan-packager 
* http://dann.g.hatena.ne.jp/dann

---- 
= 目次
* Angelosとは？
* 優しいWAFの基本構成要素の作り方 
* 優しいWAFの味付けの仕方
* まとめ

----
= What is Angelos?
* PerlのWAFの拡張性の高さ（何でもプラガブル）を活かしつつ
* Django, Railsのようなフルスタックを実現できる
* WSGIに対応した
* MousefulなWAF

----
= Angelosをつくり始めた動機
* Railの様々なすばらしい機構(CoC、フルスタック)
* PythonのWSGI (HTTP::Engine)
* Moose

----
= WAFの最小構成要素
* Engine
* Dispatcher
* Component Loader

----
= Angelosの最小構成要素部分
* Dispatcher
** RESTful dispatcher - HTTP::Router
* Component Loader
** DI Container - Bread::Board(?)
*  Engine
** HTTP::Engine

----
= What is Engine - Angelos::Engine 
リクエストを受けて、レスポンスを返すEngine(サーバー抽象化）

  sub build_engine {
      my $self            = shift;
      my $request_handler = $self->request_handler;
      $request_handler ||= $self->build_request_handler;
  
      return HTTP::Engine->new(
          interface => {
              module => $self->server,
              ...
              request_handler => $request_handler,
          },
      );
  }

---- 
= Request Handler - Angelos::Engine::Base
Engineに渡すrequest handler

  sub handle_request {
      my ( $self, $req ) = @_; 
      eval { $self->DISPATCH($req); };
      if ( my $e = Exception::Class->caught() ) { 
          $self->HANDLE_EXCEPTION($e);
      }   
      return $self->app->res;
  }

---- 
= What is Dispatcher 
== URLとControllerのメソッドのマッピング
== requestに該当するControllerを探してDispatch

----
= ディスパッチ処理 - 全体
reqを受けて、dispatchして、resを返す

  sub DISPATCH {
      my ( $self, $req ) = @_; 
      my $dispatch = $self->dispatcher->dispatch($req);
      ... 
      $dispatch->run;
      $c->res;
  }

----
= Angelos::Dispatcher 
== HTTP::Routerでrequestにマッチするrouteを取得

  sub dispatch {
      my ( $self, $request ) = @_; 
      my $match = $self->router->match($request);
      my $dispatch = $self->dispatch_class->new( match => $match );
      return $dispatch;
  }

----
= Angelos::Dispatcher::Dispatch
== matching情報からControllerを探す 
== Controllerの該当するActionを実行

    my $controller_instance = $self->find_controller_instance(
        {   context    => $c, 
            controller => $controller,
        }
    );  
    $controller_instance->context($c);
    $controller_instance->_dispatch_action( $action, $params );

----
= ルーティング定義

  HTTP::Router->define(
      sub {
          $_->match('/')->to( { controller => 'Root', action => 'index' } );
          $_->resources('Book');
      }   
  );

----
= ルーティングテーブル

  .----------------------------------------------------+------------+------------+------------.
  | path                                               | method     | controller | action     |
  +----------------------------------------------------+------------+------------+------------+
  | /                                                  |            | Root       | index      |
  | /book.{format}                                     | POST       | Books      | create     |
  | /book                                              | POST       | Books      | create     |
  | /book.{format}                                     | GET        | Books      | index      |
  | /book                                              | GET        | Books      | index      |
  | /book/new.{format}                                 | GET        | Books      | post       |
  | /book/new                                          | GET        | Books      | post       |
  | /book/{book_id}.{format}                           | GET        | Books      | show       |
  | /book.{format}                                     | POST       | Books      | create     |
  | /book                                              | POST       | Books      | create     |
  | /book.{format}                                     | GET        | Books      | index      |
  | /book.{bookk_id}.{format}                          | DELETE     | Books      | destroy    |
  | /book/{book_id}                                    | DELETE     | Books      | destroy    |
  | /book/{book_id}.{format}                           | PUT        | Books      | update     |
  | /book/{book_id}                                    | PUT        | Books      | update     |
  '----------------------------------------------------+------------+------------+------------'

----
= WAFの基本部分完成！
* これで基本部分は完成です
* シンプルなWAFは4-5時間あれば作れちゃいます

----
= 優しいWAFの味付けの仕方
* 基本部分ができたら後は味付け
* 味付けにはポリシーが重要

----
= 味付けの基本ポリシー
* コアを小さく、拡張可能に
* 拡張性とセットのデフォルトセットの提供
* 規約によるルールの共有

----
= 拡張部分の優しい作り方
* 拡張部分のポリシー
* 拡張の作り方を簡単に

----
= コアを小さく、置き換え／拡張拡張可能に(Policy)
* Pluginによる拡張
* フレームワーク共通部分を置き換え可能に
** Config, Logger, I18N, Caching

----
= 適切な箇所を拡張できる(Policy)
拡張できる箇所を制限し、明確に

* Controller
* View
* Middleware

----
= プラグイン機構の分類
* ライフサイクルへのHook
* メソッド生やす系 

----
= プラグインの実現方法
* Hook系 
** Class::Trigger like
** Mooseのmethod modifier系
* メソッド生やす系
** import
** 多重継承
** MouseのRole
----
= Angelosでのプラグイン機構の作り方
== Hook pointは大文字で
== modifierでHook
----
= Hookが定義されているControllerのコード
Hook pointの明示 

  sub _dispatch_action {
      my ( $self, $action, $params ) = @_;
      ... 
      $self->_call_filters( $self->before_filters, $action, $params );
      eval { $self->ACTION( $self->context, $action, $params ); };
      ... 
      $self->_call_filters( $self->after_filters, $action, $params );
  }


----
= プラグインのコード
== アクションにかかった時間の計測
  before 'ACTION' => sub {
      my ( $self, $c, $action, $params ) = @_;
      $self->__action_start_time( time() );
  };
   
  after 'ACTION' => sub {
      my ( $self, $c, $action, $params ) = @_;
      $self->__action_end_time( time() );
   
      my $elapsed = $self->__action_end_time - $self->__action_start_time;
      my $message
          = "action processing time:\naction: $action \ntime : $elapsed secs\n";
      $self->log->info($message);
  };

----
= MouseのRoleベースのPlugin 
* メリット
** hook pointに大してmodifierでbefore, after, aroundに対する処理を定義できる
** Pluginにメソッドかけば、そのメソッドが生える
* デメリット 
** メソッドバッティングの危険性（少し作り方に注意がいる） 

----
= 適切なデフォルトセットの提供は重要
== 適切なデフォルトセットがないと
* Unicode化するためのTipsが乱立
* Inflate, DeflateするためのTipsが... 
etc...

----
= 適切なデフォルトセットって？
拡張のデフォルトセットを提供する

* Plugin
* Middleware
** Unicode
* DBIC
** Unicode, Inflate/Deflate etc

----
= 優しい規約の設定の仕方
規約はプロジェクトで知識を共有する上で重要

* クラス構成
* Routing
* Project Structure

----
= クラス構成の規約が無いと...
- 設計ポリシーがバラバラに...
- Controllerに処理ベタ書きに...

= クラス構成
== Web, CLIからのService (+ Logger, Config)の共有
== MMVC

  Web
    View
    Controller
  CLI
  Service
  Model

See CatalystCon#1 :)

= Routingの規約がないと...
== Controller中にGET, POSTなどが1メソッドに混在したり...

  sub xxx {
    if(GET) {
       ...
    } elsif (POST) {
       ...
    }
  }

----
= Routingの規約
* Routing系モジュール
** HTTP::Router, Path::Dispatcher, HTTPx::Dispatcher, Path::Router と色々ある
* 使ったのはHTTP::Router(ikasam_a++)
** 柔軟なURL設計よりも分かりやすい規約
** URL設計に規約を用いることでシンプル化

----
= Project Structureがないと...
自分のプロジェクトのディレクトリ構成はxxxです
* config, sql, template ... 

----
= Project Structure

  |-- conf
  |   `-- environments
  |       |-- development
  |       |-- production
  |       `-- testing
  |-- db
  |-- lib
  |-- log
  |-- share
  |   |-- po
  |   `-- root
  |       |-- static
  |       |   |-- css
  |       |   |-- images
  |       |   `-- js
  |       `-- views
  |           |-- layouts
  |           `-- root
  |-- t
  |   |-- integration
  |   `-- unit

----
= 最後に
== 次の世代のWAFに興味のある方は是非 :)
== http://github.com/dann/angelos/tree/master

----
banner_bgcolor: lightblue
----

